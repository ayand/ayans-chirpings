{"version":3,"sources":["queries/GetCategories.js","components/header/Header.js","queries/GetLatestPosts.js","components/post/PostBlurb.js","components/homepage/Homepage.js","queries/GetPostsByCategory.js","components/categories/Category.js","queries/GetPost.js","mutations/WriteComment.js","queries/GetRelatedPosts.js","components/post/PostContainer.js","components/post/RelatedPosts.js","components/comments/Comment.js","components/post/Post.js","queries/GetPostPage.js","components/postHistory/PostHistory.js","queries/GetSearchResults.js","components/search/SearchResults.js","components/routing/Routes.js","components/App.js","serviceWorker.js","index.js"],"names":["gql","graphql","query","props","useState","searchTerm","setSearchTerm","history","useHistory","data","categories","filter","cat","name","Navbar","collapseOnSelect","expand","bg","variant","Brand","as","Link","to","style","fontFamily","color","Toggle","aria-controls","Collapse","id","Nav","className","map","category","key","Form","inline","onSubmit","event","preventDefault","term","push","Group","controlId","Control","autoComplete","type","placeholder","value","onChange","e","target","Button","PostBlurb","post","showExcerpt","d","Date","date","alt","src","image","thumbnail","textAlign","padding","dangerouslySetInnerHTML","__html","title","getMonth","getDate","getFullYear","excerpt","latestPosts","console","log","paddingLeft","paddingRight","backgroundColor","fontSize","href","height","Category","page","setPage","maxPage","setMaxPage","useLazyQuery","getPostsByCategory","loading","visiblePosts","setVisiblePosts","setCategory","useEffect","variables","match","params","postsByCategory","pageCount","posts","changePosts","p","ButtonGroup","onClick","PostContainer","RelatedPosts","this","relatedPosts","Component","options","postId","Comment","comment","convertedDate","parseFloat","author_name","toLocaleString","content","mutation","setContent","setAuthorName","comments","sort","a","b","full","length","maxHeight","overflow","border","payload","mutate","refetchQueries","then","res","catch","graphQLErrors","Label","rows","block","PostHistory","getPostPage","postPage","offset","SearchResults","getSearchResults","search","results","result","Routes","exact","path","component","Homepage","Post","App","basename","header","headerOnly","Boolean","window","location","hostname","client","ApolloClient","link","HttpLink","uri","cache","InMemoryCache","connectToDevTools","dataIdFromObject","o","Root","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a0dd1421.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport default gql`\n    {\n        categories {\n          id,\n          name\n        }\n    }\n`\n","import React, { useState } from 'react';\nimport { graphql } from 'react-apollo';\nimport query from '../../queries/GetCategories';\nimport { Link } from 'react-router-dom';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { useHistory } from \"react-router-dom\";\n\nconst Header = (props) => {\n    const [searchTerm, setSearchTerm] = useState('');\n    const history = useHistory();\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        //history.push(`/search/${entity.toLowerCase()}/${searchTerm}`);\n        if (searchTerm !== \"\") {\n          const term = searchTerm;\n          setSearchTerm('');\n          history.push(`/search/${term}`);\n        }\n    }\n\n\n    if (!props.data.categories) {\n        return <div></div>\n    }\n    const categories = props.data.categories.filter(cat => cat.name !== \"Uncategorized\" && cat.name !== \"Featured\")\n    return (\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"success\" variant=\"dark\">\n          <Navbar.Brand as={Link} to=\"/\" style={{ fontFamily: 'optima', color: '#deb666' }}><h2>Ayan's Chirpings</h2></Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n\n              <Nav className=\"ml-auto\">\n                  {categories.map(category => {\n                      return <Nav.Link as={Link} key={category.id} to={`/categories/${category.id}`}>{category.name}</Nav.Link>\n                  })}\n                  <Nav.Link as={Link} to={'/archives'}>Archives</Nav.Link>\n\n              </Nav>\n              <Form inline onSubmit={onSubmit}>\n                <Form.Group controlId=\"exampleForm.ControlInput1\">\n                  <Form.Control autoComplete=\"off\" type=\"text\" placeholder=\"Search for posts\" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />\n                </Form.Group>\n                <Button className=\"float-right\" variant=\"success\" type=\"submit\">Search</Button>\n              </Form>\n          </Navbar.Collapse>\n      </Navbar>\n    )\n}\n\nexport default graphql(query)(Header);\n","import gql from 'graphql-tag';\n\nexport default gql`\n    query {\n      latestPosts {\n        id,\n        title,\n        excerpt,\n        date,\n        image {\n          id,\n          thumbnail,\n          full\n        }\n      }\n    }\n`\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst PostBlurb = ({ post, showExcerpt }) => {\n    const d = new Date(post.date);\n    return (\n        <div>\n            <div className=\"row\">\n                <div className=\"col-2\">\n                    <div className=\"image\">\n                        <img alt=\"thumbnail\" src={post.image.thumbnail} className=\"img-thumbnail img-fluid\"/>\n                    </div>\n                </div>\n                <div style={{ textAlign: 'left', padding: '10px' }} className=\"col-10\">\n                    {showExcerpt && (\n                        <h4>\n                            <Link style={{color: '#2a4d15'}} to={`/posts/${post.id}`} dangerouslySetInnerHTML={{ __html: post.title }}></Link>\n                        </h4>\n                    )}\n                    {!showExcerpt && (\n                        <h5>\n                            <Link style={{color: '#2a4d15'}} to={`/posts/${post.id}`} dangerouslySetInnerHTML={{ __html: post.title }}></Link>\n                        </h5>\n                    )}\n                    <h6>{`${d.getMonth()+1}/${d.getDate()}/${d.getFullYear()}`}</h6>\n                    {showExcerpt && <div dangerouslySetInnerHTML={{ __html: post.excerpt }}/>}\n\n                </div>\n            </div>\n            <hr/>\n        </div>\n    )\n}\n\nexport default PostBlurb;\n","import React from 'react';\nimport { graphql } from 'react-apollo';\nimport query from '../../queries/GetLatestPosts';\nimport Button from 'react-bootstrap/Button';\nimport PostBlurb from '../post/PostBlurb';\n\nconst Homepage  = (props) =>  {\n\n    if (!props.data.latestPosts) {\n        return <div></div>\n    }\n    console.log(props.data.latestPosts);\n    var {latestPosts} = props.data;\n    return (\n      <div>\n          <div className=\"container-fluid\" style={{paddingLeft: '150px', paddingRight: '150px'}}>\n              <br/>\n              <div className=\"jumbotron\" style={{ padding: '40px', backgroundColor: '#a0ed6f' }}>\n                  <div className=\"row\">\n                      <div className=\"col-9\">\n                          <h1>Ayan Das</h1>\n                          <p style={{ fontSize: '24px' }}>Welcome to my blog!</p>\n                          <p style={{ fontSize: '24px' }}>I'm a software engineer with KPMG with avid interests in tech, cooking, travel, and entertainment. I've revamped the site to give you all a more fun reading experience and give my coding skills a good challenge! Join me as I share my thoughts on a little of everything, and feel free to give me your thoughts with a comment!</p>\n                          <p style={{ fontSize: '24px' }}>Get my freshest blog updates through my Twitter account <a href=\"https://twitter.com/ayandasgatech?lang=en\">@AyanDasGATech</a>!</p>\n                      </div>\n                      <div className=\"col-3\">\n                          <img className=\"img-fluid\" src=\"http://ayandas.com/wp-content/uploads/2020/10/profilePic-scaled.jpg\"/>\n                      </div>\n                  </div>\n              </div>\n              <br/>\n              <br/>\n              <h3>Latest Posts</h3>\n              <br/>\n              {latestPosts.map(post => {\n                  return <PostBlurb key={post.id} post={post} showExcerpt={true} height={120} />\n              })}\n              <Button variant=\"outline-success\" className=\"float-right\">See more</Button>\n              <br/>\n              <br/>\n              <br/>\n          </div>\n      </div>\n    )\n}\n\nexport default graphql(query)(Homepage);\n","import gql from 'graphql-tag';\n\nexport default gql`\n    query GetPostsByCategory($category: ID, $page: Int) {\n      postsByCategory(category: $category, page: $page) {\n        id,\n        category,\n        pageCount,\n        posts {\n          id,\n          title,\n          excerpt,\n          date,\n          image {\n            id,\n            thumbnail\n          }\n        }\n      }\n    }\n`;\n","import React, { useState, useEffect } from 'react';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport query from '../../queries/GetPostsByCategory';\nimport { useLazyQuery } from '@apollo/react-hooks';\n\nimport PostBlurb from '../post/PostBlurb';\n\nconst Category = (props) => {\n\n    const [page, setPage] = useState(1);\n    const [maxPage, setMaxPage] = useState(1);\n    const [getPostsByCategory, { loading, data }] = useLazyQuery(query);\n    const [visiblePosts, setVisiblePosts] = useState([]);\n    const [cat, setCategory] = useState(\"\");\n\n    useEffect(() => {\n        setPage(1);\n        getPostsByCategory({ variables: { category: props.match.params.id, page: 1 } })\n    }, [props.match.params.id, getPostsByCategory])\n\n    useEffect(() => {\n        if (data) {\n          const { category, pageCount, posts } = data.postsByCategory;\n          if (page === 1) {\n              setCategory(category);\n              setMaxPage(pageCount);\n          }\n          setVisiblePosts(posts);\n        }\n    }, [data])\n\n    const changePosts = (p) => {\n        getPostsByCategory({ variables: { category: props.match.params.id, page: p } })\n        setPage(p)\n    }\n\n    if (!data || loading) {\n        return <div></div>\n    }\n    return (\n      <div style={{padding: '30px'}}>\n          <h2 style={{textAlign: 'center', color: '#409c08'}} dangerouslySetInnerHTML={{__html: cat}}></h2>\n          <h6 style={{textAlign: 'center'}}>Page {page}</h6>\n          <br/>\n          <div className='wrapper text-center'>\n              <ButtonGroup>\n                  { page !== 1 && <Button variant=\"secondary\" onClick={() => { changePosts(page - 1) }}>Previous</Button>}\n                  { page !== maxPage && <Button variant=\"secondary\" onClick={() => { changePosts(page + 1) }}>Next</Button>}\n              </ButtonGroup>\n          </div>\n          <br/>\n          <br/>\n          <div className=\"container-fluid\" style={{paddingLeft: '150px', paddingRight: '150px'}}>\n              {visiblePosts.map(post => {\n                  return <PostBlurb key={post.id} post={post} showExcerpt={true} height={120} />\n              })}\n          </div>\n          <br/>\n          <br/>\n          <div className='wrapper text-center'>\n              <ButtonGroup>\n                  { page !== 1 && <Button variant=\"secondary\" onClick={() => { changePosts(page - 1) }}>Previous</Button>}\n                  { page !== maxPage && <Button variant=\"secondary\" onClick={() => { changePosts(page + 1) }}>Next</Button>}\n              </ButtonGroup>\n          </div>\n          <br/>\n      </div>\n    )\n}\n\nexport default Category;\n","import gql from 'graphql-tag';\n\nexport default gql`\n        query PostById($id: ID) {\n            post(id: $id) {\n                id,\n                title,\n                content,\n                date,\n                image {\n                  id,\n                  full\n                },\n                category {\n                  id,\n                  name\n                },\n                comments {\n                  id,\n                  content,\n                  author_name,\n                  date\n                }\n            }\n        }\n    `;\n","import gql from 'graphql-tag';\n\nexport default gql`\n    mutation WriteComment($post: ID, $content: String, $author_name: String) {\n        writeComment(post: $post, content: $content, author_name: $author_name) {\n            id,\n            content,\n            author_name,\n            date,\n            postId\n        }\n    }\n`;\n","import gql from 'graphql-tag';\n\nexport default gql`\n    query GetRelatedPosts($postId: ID) {\n        relatedPosts(postId: $postId) {\n            id,\n            title,\n            date,\n            image {\n              id,\n              thumbnail\n            }\n        }\n    }\n`\n","import React from 'react';\nimport PostBlurb from './PostBlurb';\n\nconst PostContainer = ({ posts, category }) => {\n    return (\n      <div className=\"container\">\n          { category !== \"Featured\" && <h3 style={{ textAlign: 'center', color: '#2da14c' }}>Also In {category}</h3>}\n          { category === \"Featured\" && <h3 style={{ textAlign: 'center', color: '#2da14c' }}>In Featured</h3>}\n          <div className=\"container jumbotron\" style={{ padding: '20px', backgroundColor: '#a0ed6f' }}>\n              {posts.map(post => {\n                  return <PostBlurb key={post.id} post={post} showExcerpt={false} />\n              })}\n          </div>\n      </div>\n    )\n}\n\nexport default PostContainer;\n","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport query from '../../queries/GetRelatedPosts';\nimport PostContainer from './PostContainer';\n\nclass RelatedPosts extends Component {\n    render() {\n        if (!this.props.data.relatedPosts) {\n            return <div></div>\n        }\n        return <PostContainer posts={this.props.data.relatedPosts} category={this.props.post.category.name}/>;\n    }\n}\n\nexport default graphql(query, {\n  options: ({ post }) => { return { variables: { postId: post.id } } }\n})(RelatedPosts);\n","import React from 'react';\n\nconst Comment = ({ comment }) => {\n\n    var convertedDate = new Date(parseFloat(comment.date) * 1000);\n\n\n    return (\n      <div>\n          <h5 style={{color: '#409c08'}} >{comment.author_name}</h5>\n          <h6>{convertedDate.toLocaleString()}</h6>\n          <br/>\n          <p>{comment.content}</p>\n          <hr/>\n      </div>\n    )\n\n}\n\nexport default Comment;\n","import React, { useState, useEffect } from 'react';\nimport { graphql } from 'react-apollo';\nimport query from '../../queries/GetPost';\nimport mutation from '../../mutations/WriteComment';\nimport RelatedPosts from './RelatedPosts';\nimport Comment from '../comments/Comment';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nconst Post = (props) => {\n  const [content, setContent] = useState('');\n  const [author_name, setAuthorName] = useState('');\n\n  const compare = (a, b) => {\n      if (a.date < b.date) {\n          return 1;\n      }\n      if (a.date > b.date) {\n          return -1;\n      }\n      return 0;\n  }\n\n  useEffect(() => {\n      setContent('');\n      setAuthorName('');\n  }, [props.match.params.id]);\n\n  if (!props.data.post) {\n      return <div></div>\n  }\n\n  const onSubmit = (event) => {\n      event.preventDefault();\n      if (content === '' || author_name === '') {\n          return;\n      }\n      console.log(content);\n      console.log(author_name);\n      const post = props.match.params.id;\n      const payload = { post, content, author_name }\n      console.log(payload);\n      props.mutate({\n        variables: payload,\n        refetchQueries: [{\n            query,\n            variables: { id: props.match.params.id }\n        }]\n      }).then(res => {\n          setContent('');\n          setAuthorName('');\n      })\n      .catch(res => {\n              console.log(res);\n              if (res.graphQLErrors) {\n                  console.log(res.graphQLErrors);\n              }\n          })\n  }\n\n  const { post } = props.data;\n  const d = new Date(post.date);\n  post.comments.sort(compare);\n  return (\n    <div className=\"container-fluid\">\n        <br/>\n        <div className=\"row\">\n            <div style={{textAlign: 'center'}} className=\"col-lg-8\">\n                <h3 style={{color: '#2a4d15'}} dangerouslySetInnerHTML={{__html: post.title}}></h3>\n                <h4>{`${d.getMonth()+1}/${d.getDate()}/${d.getFullYear()}`}</h4>\n                <br/>\n                {post.image && <img alt=\"post\" src={post.image.full} className=\"img-fluid\"/>}\n                <br/>\n                <br/>\n                <div className=\"container\" style={{textAlign: 'justify'}} dangerouslySetInnerHTML={{__html: post.content}}/>\n                <br/>\n                <div style={{textAlign: 'justify'}}>\n                    <h4 style={{ color: '#2da14c' }}>Comments</h4>\n                    <hr/>\n                    {post.comments.length === 0 && <h6>Be the first to comment here!</h6>}\n                    {post.comments.length > 0 && <div style={{ maxHeight: '300px', overflow: 'scroll', border: '5px solid #4ba310', padding: '20px' }}>\n                        {post.comments.length > 0 && post.comments.map(comment => {\n                            return <Comment comment={comment} key={comment.id}/>\n                        })}\n                    </div>}\n                </div>\n                <br/>\n            </div>\n            <div className=\"col-lg-4\">\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <div className=\"container jumbotron\" style={{ padding: '20px', backgroundColor: '#a0ed6f' }}>\n                    <h3 style={{ textAlign: 'center', color: '#2a4d15' }}>Write Comment</h3>\n                    <Form onSubmit={onSubmit}>\n                        <Form.Group controlId=\"commentForm.ControlInput1\">\n                            <Form.Label><h5>Name</h5></Form.Label>\n                            <Form.Control autoComplete=\"off\" type=\"text\" placeholder=\"Name\" value={author_name} onChange={(e) => setAuthorName(e.target.value)} />\n                        </Form.Group>\n                        <Form.Group controlId=\"commentForm.ControlInput2\">\n                            <Form.Label><h5>Comment</h5></Form.Label>\n                            <Form.Control as=\"textarea\" rows=\"10\" placeholder=\"Comment\" value={content} onChange={(e) => setContent(e.target.value)}/>\n                        </Form.Group>\n                        <Button variant=\"success\" type=\"submit\" block>Submit</Button>\n                    </Form>\n                </div>\n                <RelatedPosts post={post}/>\n            </div>\n        </div>\n        <br/>\n        <br/>\n    </div>\n  )\n}\n\nexport default graphql(mutation)(graphql(query, {\n  options: (props) => { return { variables: { id: props.match.params.id } } }\n})(Post));\n","import gql from 'graphql-tag';\n\nexport default gql`\n    query GetPostPage($offset: Int) {\n        postPage(offset: $offset) {\n          id,\n          pageCount,\n          posts {\n            id,\n            title,\n            excerpt,\n            date,\n            image {\n              id,\n              thumbnail\n            }\n          }\n        }\n    }\n`\n","import React, { useState, useEffect } from 'react';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport query from '../../queries/GetPostPage';\nimport { useLazyQuery } from '@apollo/react-hooks';\n\nimport PostBlurb from '../post/PostBlurb';\n\nconst PostHistory = (props) => {\n\n    const [page, setPage] = useState(1);\n    const [maxPage, setMaxPage] = useState(1);\n    const [getPostPage, { loading, data }] = useLazyQuery(query);\n    const [visiblePosts, setVisiblePosts] = useState([]);\n\n    useEffect(() => {\n        if (data) {\n          const { pageCount, posts } = data.postPage;\n          if (page === 1) {\n              setMaxPage(pageCount);\n          }\n          setVisiblePosts(posts);\n        }\n    }, [data])\n\n    useEffect(() => {\n        getPostPage({ variables: { offset: 1 } })\n    }, [])\n\n    const changePosts = (event, offset) => {\n        event.preventDefault();\n        getPostPage({ variables: { offset } })\n        setPage(offset)\n    }\n\n    if (!data || loading) {\n        return <div></div>\n    }\n\n    return (\n      <div style={{padding: '30px'}}>\n          <h2 style={{textAlign: 'center', color: '#409c08'}}>Post Archives</h2>\n          <h6 style={{textAlign: 'center'}}>Page {page}</h6>\n          <br/>\n          <div className='wrapper text-center'>\n              <ButtonGroup>\n                  { page !== 1 && <Button variant=\"secondary\" onClick={(event) => { changePosts(event, page - 1) }}>Previous</Button>}\n                  { page !== maxPage && <Button variant=\"secondary\" onClick={(event) => { changePosts(event, page + 1) }}>Next</Button>}\n              </ButtonGroup>\n          </div>\n          <br/>\n          <br/>\n          <div className=\"container-fluid\" style={{paddingLeft: '150px', paddingRight: '150px'}}>\n              {visiblePosts.map(post => {\n                  return <PostBlurb key={post.id} post={post} showExcerpt={true} height={120} />\n              })}\n          </div>\n          <br/>\n          <br/>\n          <div className='wrapper text-center'>\n              <ButtonGroup>\n                  { page !== 1 && <Button variant=\"secondary\" onClick={(event) => { changePosts(event, page - 1) }}>Previous</Button>}\n                  { page !== maxPage && <Button variant=\"secondary\" onClick={(event) => { changePosts(event, page + 1) }}>Next</Button>}\n              </ButtonGroup>\n          </div>\n          <br/>\n      </div>\n    )\n}\n\nexport default PostHistory;\n","import gql from 'graphql-tag';\n\nexport default gql`\n    query GetSearchResults($query: String, $page: Int) {\n        search(query: $query, page: $page) {\n            id,\n            pageCount,\n            results {\n                id,\n                post {\n                    id,\n                    title,\n                    excerpt,\n                    date,\n                    image {\n                      id,\n                      thumbnail\n                    }\n                }\n            }\n        }\n    }\n`;\n","import React, { useState, useEffect } from 'react';\nimport query from '../../queries/GetSearchResults';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport PostBlurb from '../post/PostBlurb';\n\nconst SearchResults = (props) => {\n\n    const [page, setPage] = useState(1);\n    const [maxPage, setMaxPage] = useState(1);\n    const [getSearchResults, { loading, data }] = useLazyQuery(query);\n    const [visiblePosts, setVisiblePosts] = useState([]);\n\n    var {term} = props.match.params;\n\n    useEffect(() => {\n        if (data) {\n          const { pageCount, results } = data.search;\n          if (page === 1) {\n              setMaxPage(pageCount);\n          }\n          setVisiblePosts(results);\n        }\n    }, [data]);\n\n    useEffect(() => {\n        getSearchResults({ variables: { query: term, page: 1 } })\n    }, []);\n\n    useEffect(() => {\n        setPage(1);\n        term = props.match.params.term;\n        getSearchResults({ variables: { query: term, page: 1 } });\n    }, [props.match.params.term])\n\n    const changePosts = (event, offset) => {\n        event.preventDefault();\n        getSearchResults({ variables: { query: term, page: offset } })\n        setPage(offset)\n    }\n\n    if (!data || loading) {\n        return <div></div>\n    }\n\n    return (\n      <div style={{padding: '30px'}}>\n          <br/>\n          <h3 style={{ color: '#409c08', textAlign: 'center' }}>Search Results for '{term}'</h3>\n          <h6 style={{textAlign: 'center'}}>Page {page}</h6>\n          <br/>\n          <div className='wrapper text-center'>\n              <ButtonGroup>\n                  { page !== 1 && <Button variant=\"secondary\" onClick={(event) => { changePosts(event, page - 1) }}>Previous</Button>}\n                  { page !== maxPage && <Button variant=\"secondary\" onClick={(event) => { changePosts(event, page + 1) }}>Next</Button>}\n              </ButtonGroup>\n          </div>\n          <br/>\n          <br/>\n          <div className=\"container-fluid\" style={{paddingLeft: '150px', paddingRight: '150px'}}>\n              {visiblePosts.map(result => {\n                  return <PostBlurb key={result.id} post={result.post} showExcerpt={true} height={120} />\n              })}\n          </div>\n          <br/>\n          <br/>\n          <div className='wrapper text-center'>\n              <ButtonGroup>\n                  { page !== 1 && <Button variant=\"secondary\" onClick={(event) => { changePosts(event, page - 1) }}>Previous</Button>}\n                  { page !== maxPage && <Button variant=\"secondary\" onClick={(event) => { changePosts(event, page + 1) }}>Next</Button>}\n              </ButtonGroup>\n          </div>\n          <br/>\n      </div>\n    );\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Homepage from '../homepage/Homepage';\nimport Category from '../categories/Category';\nimport Post from '../post/Post';\nimport PostHistory from '../postHistory/PostHistory';\nimport SearchResults from '../search/SearchResults';\n\nconst Routes = () => {\n    return (\n        <div className=\"container-fluid\">\n            <Switch>\n                <Route exact path=\"/\" component={Homepage}/>\n                <Route exact path=\"/categories/:id\" component={Category}/>\n                <Route exact path=\"/posts/:id\" component={Post}/>\n                <Route exact path=\"/archives\" component={PostHistory}/>\n                <Route exact path=\"/search/:term\" component={SearchResults}/>\n            </Switch>\n        </div>\n    )\n}\n\nexport default Routes;\n","import React from 'react';\nimport Header from './header/Header';\nimport Routes from './routing/Routes';\nimport { Route, Switch, HashRouter } from 'react-router-dom';\nimport 'react-sticky-header/styles.css';\nimport StickyHeader from 'react-sticky-header';\nimport './styles.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container-fluid\">\n          <HashRouter basename=\"/\">\n            <StickyHeader header={<Header/>} headerOnly={true}>\n            </StickyHeader>\n            <br/>\n            <br/>\n            <br/>\n            <Switch>\n                <Route component={Routes}/>\n            </Switch>\n          </HashRouter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst client = new ApolloClient({\n  link: new HttpLink({\n    uri: 'https://ybitwx58e5.execute-api.us-east-1.amazonaws.com/prod/graphql'\n  }),\n  cache: new InMemoryCache(),\n  connectToDevTools: true,\n  dataIdFromObject: o => o.id\n})\n\nconst Root = () => {\n    return (\n      <ApolloProvider client={client}>\n          <Router>\n              <App/>\n          </Router>\n      </ApolloProvider>\n    )\n}\n\nReactDOM.render(\n    <Root />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}